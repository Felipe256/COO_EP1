/**
 * Classe contendo aÃ§Ãµes e informaÃ§Ãµes sobre cada espaÃ§o (quadrado) no tabuleiro
 */
public class Spot {

	private Piece peca;
	private Position posicao;
	private Color cor;
	
    /**
     * Construtor para espaÃ§os com peÃ§a e com cor
     * @param piece PeÃ§a que inicia nesse espaÃ§o do tabuleiro
     * @param pos PosiÃ§Ã£o do espaÃ§o no tabuleiro
     * @param color Cor do espaÃ§o no tabuleiro (Templo)
     */
    public Spot(Piece piece, Position pos, Color color) {
    	peca = piece;
    	posicao = pos;
    	cor = color;
    }

    /**
     * Construtor para espaÃ§os com peÃ§a e sem cor
     * @param piece PeÃ§a que inicia nesse espaÃ§o do tabuleiro
     * @param pos PosiÃ§Ã£o do espaÃ§o no tabuleiro
     */
    public Spot(Piece piece, Position pos) {
    	peca = piece;
    	posicao = pos;
    	cor = Color.NONE;
    }

    /**
     * Construtor para espaÃ§os sem peÃ§a e sem cor
     * @param pos PosiÃ§Ã£o do espaÃ§o no tabuleiro
     */
    public Spot(Position pos) {
    	peca = null;
    	posicao = pos;
    	cor = Color.NONE;
    }

    /**
     * MÃ©todo que devolve a posiÃ§Ã£o (coordenadas) do espaÃ§o
     * @return Objeto Position contendo a posiÃ§Ã£o (coordenadas) do espaÃ§o
     */
    public Position getPosition() {
        return(posicao);
    }

    /**
     * MÃ©todo que devolve a peÃ§a contida neste espaÃ§o
     * @return Objeto Piece caso tenha uma peÃ§a ou null caso o espaÃ§o esteja vazio
     */
    public Piece getPiece() {
        return(peca);
    }

    /**
     * MÃ©todo que devolve a cor do espaÃ§o
     * @return Enum Color com a cor do espaÃ§o. Caso o espaÃ§o nÃ£o tenha cor, o valor do enum serÃ¡ NONE
     */
    public Color getColor() {
        return(cor);
    }

    /**
     * MÃ©todo que verifica se a posiÃ§Ã£o Ã© vÃ¡lida no tabuleiro
     * @return Um booleano que indica se o objeto representa uma posiÃ§Ã£o vÃ¡lida no tabuleiro
     */
    public boolean isValid() {
        return(verificaValidadeDaCoordenada(posicao.getRow()) && verificaValidadeDaCoordenada(posicao.getCol()) );
    }
    
    /**
     * 
     * @param coordenada coordenada contida em uma posicao
     * @return Um booleano true para caso seja valido e false caso contrário
     */
    private boolean verificaValidadeDaCoordenada(int coordenada) {
    	return(coordenada >= 0 && coordenada <= 4);
    }

    /**
     * MÃ©todo que ocupa o espaÃ§o atual com a peÃ§a passada
     * @param piece A peÃ§a para ocupar este espaÃ§o
     * @exception IllegalMovementException Caso o espaÃ§o jÃ¡ esteja ocupado por uma peÃ§a da mesma cor
     */
    protected void occupySpot(Piece piece) throws IllegalMovementException {
    	if(this.peca == null) {
    		peca = piece;
    	}else if(this.peca.getColor() != piece.getColor()) {
    		if(this.peca != null) {
    			this.peca.die();
    		}
    		this.peca = piece;
    	}else {
    		throw new IllegalMovementException("O espaço ocupado é por uma de suas pecas");
    	}
    }

    /**
     * MÃ©todo que "libera" o espaÃ§o atual, ou seja, deixa-o vazio
     */
    protected void releaseSpot() {
    	peca = null;
    }
}
