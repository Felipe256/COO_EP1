/**
 * Classe que cont√©m informa√ß√µes e a√ß√µes b√°sicas relacionadas aos jogadores
 */
public class Player {
	
	private String nome;
	private Color cor;
	private Card carta1;
	private Card carta2;
	
    /**
     * Construtor que define informa√ß√µes b√°sicas do jogador
     * @param name Nome do jogador
     * @param pieceColor Cor das pe√ßas do jogador
     * @param cards Cartas na m√£o do jogador
     */
    public Player(String name, Color pieceColor, Card[] cards) {
    	nome = name;
    	cor = pieceColor;
    	carta1 = cards[0];
    	carta2 = cards[1];
    }

    /**
     * Construtor que define informa√ß√µes b√°sicas do jogador
     * @param name Nome do jogador
     * @param pieceColor Cor das pe√ßas do jogador
     * @param card1 A primeira carta na m√£o do jogador
     * @param card2 A segunda carta na m√£o do jogador
     */
    public Player(String name, Color pieceColor, Card card1, Card card2) {
    	nome = name;
    	cor = pieceColor;
    	carta1 = card1;
    	carta2 = card2;
    }

    /**
     * M√©todo que devolve o nome do jogador(a)
     * @return String com o nome do jogador(a)
     */
    public String getName() {
        return(nome);
    }

    /**
     * M√©todo que devolve a cor das pe√ßas do jogador
     * @return Enum Color com a cor das pe√ßas do jogador
     */
    public Color getPieceColor() {
        return(cor);
    }

    /**
     * M√©todo que devolve as cartas da m√£o do jogador
     * @return Booleano true para caso seja um mestre e false caso contr√°rio
     */
    public Card[] getCards() {
    	Card cartasNaMao[] = {carta1, carta2};
        return(cartasNaMao);
    }

    /**
     * M√©todo que troca uma carta da m√£o por outra carta (idealmente da mesa)
     * @param oldCard A carta que ser√° substitu√≠da
     * @param newCard A carta que ir√° substituir
     * @exception InvalidCardException Caso a carta n√£o esteja na m√£o do jogador e/ou na mesa
     */
    protected void swapCard(Card oldCard, Card newCard) throws InvalidCardException {
    	try {
    		Card auxiliarDeTroca = oldCard;
    		oldCard = newCard;
    		newCard = auxiliarDeTroca;
    	} catch (RuntimeException error){
    		new InvalidCardException("A carta escolhida n„o est· na m„o do jogador: "+error);
    	}
    }
}
